{"version":3,"file":"cdk-experimental-clipboard.umd.min.js","sources":["../../src/cdk-experimental/clipboard/clipboard.ts","../../src/cdk-experimental/clipboard/copy-to-clipboard.ts","../../src/cdk-experimental/clipboard/clipboard-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n/**\n * A service for copying text to the clipboard.\n *\n * Example usage:\n *\n * clipboard.copy(\"copy this text\");\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n\n    // Hide the element for display and accessibility.\n    textarea.setAttribute('style', 'opacity: 0;');\n    textarea.setAttribute('aria-hidden', 'true');\n\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = document.activeElement;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    if (this._textarea) {\n      this._document.body.removeChild(this._textarea);\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\n\nimport {Clipboard} from './clipboard';\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n *\n * Example usage:\n *\n * `<button copyToClipboard=\"Content to be copied\">Copy me!</button>`\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'doCopy()',\n  }\n})\nexport class CdkCopyToClipboard {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text = '';\n\n  @Output() copied = new EventEmitter<boolean>();\n\n  constructor(private readonly clipboard: Clipboard) {}\n\n  doCopy() {\n    this.copied.emit(this.clipboard.copy(this.text));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  imports: [CommonModule],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n"],"names":["Clipboard","document","this","_document","prototype","copy","text","pendingCopy","beginCopy","successful","destroy","PendingCopy","type","Injectable","args","providedIn","undefined","decorators","Inject","DOCUMENT","textarea","_textarea","createElement","setAttribute","value","body","appendChild","currentFocus","activeElement","select","setSelectionRange","length","execCommand","HTMLElement","focus","_a","removeChild","CdkCopyToClipboard","clipboard","copied","EventEmitter","doCopy","emit","Directive","selector","host","(click)","Input","Output","ClipboardModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":";;;;;;;kaAkBA,IAAAA,GAAA,WAIE,QAAFA,GAAgCC,GAC5BC,KAAKC,UAAYF,EAvBrB,MAgCED,GAAFI,UAAAC,KAAE,SAAKC,GACP,GAAUC,GAAcL,KAAKM,UAAUF,GAC7BG,EAAaF,EAAYF,MAG/B,OAFAE,GAAYG,UAELD,GAYTT,EAAFI,UAAAI,UAAE,SAAUF,GACR,MAAO,IAAIK,GAAYL,EAAMJ,KAAKC,2BAhCtCS,KAACC,EAAAA,WAADC,OAAaC,WAAY,+CAIzBH,SAAAI,GAAAC,aAAAL,KAAeM,EAAAA,OAAfJ,MAAsBK,EAAAA,4IAtBtBnB,kBAsEE,QAAFW,GAAcL,EAA+BH,GAAAD,KAA7CC,UAA6CA,CAC7C,IAAUiB,GAAWlB,KAAKmB,UAAYnB,KAAKC,UAAUmB,cAAc,WAG/DF,GAASG,aAAa,QAAS,eAC/BH,EAASG,aAAa,cAAe,QAErCH,EAASI,MAAQlB,EACjBJ,KAAKC,UAAUsB,KAAKC,YAAYN,GAmCpC,MA/BET,GAAFP,UAAAC,KAAE,WACF,GAAUe,GAAWlB,KAAKmB,UAClBZ,GAAa,CAEjB,KACE,GAAIW,EAAU,CACpB,GAAcO,GAAe1B,SAAS2B,aAE9BR,GAASS,SACTT,EAASU,kBAAkB,EAAGV,EAASI,MAAMO,QAC7CtB,EAAaP,KAAKC,UAAU6B,YAAY,QAEpCL,YAAwBM,cAC1BN,EAAaO,SAGjB,MAANC,IAKI,MAAO1B,IAITE,EAAFP,UAAAM,QAAE,WACMR,KAAKmB,YACPnB,KAAKC,UAAUsB,KAAKW,YAAYlC,KAAKmB,WACrCnB,KAAKmB,cAAYL,KAGvBL,KC7FA0B,EAAA,WAYE,QAAFA,GAA+BC,GAAApC,KAA/BoC,UAA+BA,EAJApC,KAA/BI,KAAsC,GAE1BJ,KAAZqC,OAAqB,GAAIC,GAAAA,aAOzB,MAHEH,GAAFjC,UAAAqC,OAAE,WACEvC,KAAKqC,OAAOG,KAAKxC,KAAKoC,UAAUjC,KAAKH,KAAKI,uBAf9CM,KAAC+B,EAAAA,UAAD7B,OACE8B,SAAU,uBACVC,MACEC,UAAW,oDAbflC,KAAQZ,uBAkBRM,OAAAM,KAAGmC,EAAAA,MAAHjC,MAAS,wBAETyB,SAAA3B,KAAGoC,EAAAA,UAOHX,KCxBAY,EAAA,WAAA,QAAAA,MAMA,sBANArC,KAACsC,EAAAA,SAADpC,OACEqC,cAAed,GACfe,SAAUC,EAAAA,cACVC,SAAUjB,OAGZY"}